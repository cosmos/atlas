definitions:
  httputil.ErrResponse:
    properties:
      error:
        type: string
    type: object
  httputil.PaginationResponse:
    properties:
      limit:
        type: integer
      next_uri:
        type: string
      order:
        type: string
      page:
        type: integer
      prev_uri:
        type: string
      results:
        type: object
      reverse:
        type: boolean
      total:
        type: integer
    type: object
  models.BugTracker:
    properties:
      contact:
        type: string
      module_id:
        type: integer
      url:
        type: string
    type: object
  models.Keyword:
    properties:
      name:
        type: string
    type: object
  models.KeywordJSON:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Module:
    properties:
      authors:
        items:
          $ref: '#/definitions/models.User'
        type: array
      bug_tracker:
        $ref: '#/definitions/models.BugTracker'
        description: one-to-one relationships
        type: object
      description:
        type: string
      documentation:
        type: string
      homepage:
        type: string
      keywords:
        description: many-to-many relationships
        items:
          $ref: '#/definitions/models.Keyword'
        type: array
      name:
        type: string
      owners:
        items:
          $ref: '#/definitions/models.User'
        type: array
      repo:
        type: string
      stars:
        type: integer
      team:
        type: string
      versions:
        items:
          $ref: '#/definitions/models.ModuleVersion'
        type: array
    type: object
  models.ModuleJSON:
    properties:
      authors:
        items:
          $ref: '#/definitions/models.User'
        type: array
      bug_tracker:
        $ref: '#/definitions/models.BugTracker'
        type: object
      created_at:
        type: string
      description:
        type: string
      documentation:
        type: string
      homepage:
        type: string
      id:
        type: integer
      keywords:
        items:
          $ref: '#/definitions/models.Keyword'
        type: array
      name:
        type: string
      owners:
        items:
          $ref: '#/definitions/models.User'
        type: array
      repo:
        type: string
      stars:
        type: integer
      team:
        type: string
      updated_at:
        type: string
      versions:
        items:
          $ref: '#/definitions/models.ModuleVersion'
        type: array
    type: object
  models.ModuleVersion:
    properties:
      module_id:
        type: integer
      sdk_compat:
        type: string
      version:
        type: string
    type: object
  models.ModuleVersionJSON:
    properties:
      created_at:
        type: string
      id:
        type: integer
      module_id:
        type: integer
      sdk_compat:
        type: object
      updated_at:
        type: string
      version:
        type: string
    type: object
  models.User:
    properties:
      avatarURL:
        type: string
      email:
        type: string
      emailConfirmed:
        type: boolean
      fullName:
        type: string
      githubAccessToken:
        type: string
      githubUserID:
        type: string
      gravatarID:
        type: string
      modules:
        description: many-to-many relationships
        items:
          $ref: '#/definitions/models.Module'
        type: array
      name:
        type: string
      stars:
        items:
          type: integer
        type: array
      tokens:
        description: one-to-many relationships
        items:
          $ref: '#/definitions/models.UserToken'
        type: array
      url:
        type: string
    type: object
  models.UserJSON:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: object
      email_confirmed:
        type: boolean
      full_name:
        type: string
      gravatar_id:
        type: string
      id:
        type: integer
      name:
        type: string
      stars:
        items:
          type: integer
        type: array
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.UserToken:
    properties:
      count:
        type: integer
      name:
        type: string
      revoked:
        type: boolean
      token:
        type: string
      userID:
        type: integer
    type: object
  models.UserTokenJSON:
    properties:
      count:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      revoked:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  v1.AuthorsManifest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  v1.BugTackerManifest:
    properties:
      contact:
        type: string
      url:
        type: string
    type: object
  v1.Manifest:
    properties:
      authors:
        items:
          $ref: '#/definitions/v1.AuthorsManifest'
        type: array
      bug_tracker:
        $ref: '#/definitions/v1.BugTackerManifest'
        type: object
      module:
        $ref: '#/definitions/v1.ModuleManifest'
        type: object
      version:
        $ref: '#/definitions/v1.VersionManifest'
        type: object
    required:
    - authors
    - version
    type: object
  v1.ModuleInvite:
    properties:
      module_id:
        type: integer
      user:
        type: string
    required:
    - module_id
    - user
    type: object
  v1.ModuleManifest:
    properties:
      description:
        type: string
      documentation:
        type: string
      homepage:
        type: string
      keywords:
        items:
          type: string
        type: array
      name:
        type: string
      repo:
        type: string
      team:
        type: string
    required:
    - name
    - repo
    - team
    type: object
  v1.ModuleStars:
    properties:
      stars:
        type: integer
    type: object
  v1.Token:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  v1.User:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  v1.VersionManifest:
    properties:
      sdk_compat:
        type: string
      version:
        type: string
    required:
    - version
    type: object
info:
  contact: {}
  license: {}
paths:
  /keywords:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: pagination page
        in: query
        name: page
        required: true
        type: integer
      - default: 100
        description: pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - default: "false"
        description: pagination reverse
        in: query
        name: reverse
        type: string
      - default: id
        description: pagination order by
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Return a paginated set of all keywords
      tags:
      - keywords
  /me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Get the current authenticated user
      tags:
      - users
    put:
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Update the current authenticated user
      tags:
      - users
  /me/confirm/{emailToken}:
    put:
      parameters:
      - description: email token
        in: path
        name: emailToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Confirm a user email confirmation
      tags:
      - users
  /me/invite:
    put:
      consumes:
      - application/json
      parameters:
      - description: invitation
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/v1.ModuleInvite'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Invite a user to be an owner of a module
      tags:
      - users
  /me/invite/accept/{inviteToken}:
    put:
      parameters:
      - description: invite token
        in: path
        name: inviteToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModuleJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Accept a module owner invitation
      tags:
      - users
  /me/tokens:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserTokenJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Get all API tokens by user ID
      tags:
      - users
    put:
      parameters:
      - description: token name
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v1.Token'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserTokenJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Create a user API token
      tags:
      - users
  /me/tokens/{id}:
    delete:
      parameters:
      - description: token ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserTokenJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Revoke a user API token by ID
      tags:
      - users
  /modules:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: pagination page
        in: query
        name: page
        required: true
        type: integer
      - default: 100
        description: pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - default: "false"
        description: pagination reverse
        in: query
        name: reverse
        type: string
      - default: id
        description: pagination order by
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Return a paginated set of all Cosmos SDK modules
      tags:
      - modules
    put:
      consumes:
      - application/json
      parameters:
      - description: module manifest
        in: body
        name: manifest
        required: true
        schema:
          $ref: '#/definitions/v1.Manifest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModuleJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Publish a Cosmos SDK module
      tags:
      - modules
  /modules/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModuleJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Get a Cosmos SDK module by ID
      tags:
      - modules
  /modules/{id}/authors:
    get:
      consumes:
      - application/json
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Get all authors for a Cosmos SDK module by ID
      tags:
      - modules
  /modules/{id}/keywords:
    get:
      consumes:
      - application/json
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.KeywordJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Get all keywords for a Cosmos SDK module by ID
      tags:
      - modules
  /modules/{id}/star:
    put:
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ModuleStars'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Add a favorite for a module
      tags:
      - modules
  /modules/{id}/unstar:
    put:
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ModuleStars'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      security:
      - APIKeyAuth: []
      summary: Remove a favorite for a module
      tags:
      - modules
  /modules/{id}/versions:
    get:
      consumes:
      - application/json
      parameters:
      - description: module ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ModuleVersionJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Get all versions for a Cosmos SDK module by ID
      tags:
      - modules
  /modules/search:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: pagination page
        in: query
        name: page
        required: true
        type: integer
      - default: 100
        description: pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - default: "false"
        description: pagination reverse
        in: query
        name: reverse
        type: string
      - default: id
        description: pagination order by
        in: query
        name: order
        type: string
      - description: search criteria
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Search for Cosmos SDK modules by name, team, description and keywords
      tags:
      - modules
  /users:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: pagination page
        in: query
        name: page
        required: true
        type: integer
      - default: 100
        description: pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - default: "false"
        description: pagination reverse
        in: query
        name: reverse
        type: string
      - default: id
        description: pagination order by
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Return a paginated set of all users
      tags:
      - users
  /users/{name}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserJSON'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Get a user by name
      tags:
      - users
  /users/{name}/modules:
    get:
      consumes:
      - application/json
      parameters:
      - description: user name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ModuleJSON'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrResponse'
      summary: Return a set of all Cosmos SDK modules published by a given user
      tags:
      - users
securityDefinitions:
  APIKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
